########################### Conceito ############################

O SASS tem por finalidade facilitar a codificaçao da liguagem CSS, 
além de oferecer mais funcionalidades ao mesmo e deixa-lo com 
uma melhor Performance.

O arquivo SASS pode ser escrito em duas sintaxes, neste desafio 
eu usarei a sintaxe SASS

Obs: Neste caderno eu näo irei documentar o code HTML. Este caderno
foi digitado em um teclado 60% ANSI, portanto vocë dara falta do
acento til.

########################### Preparaçäo ############################


Instale o SASS na máquina globalmente, (foi utilizado o NPM):

sudo npm install -g sass 


Instale as seguintes extensöes no VScode:

    -Live server
        Executa um pequenor servidor para rodar a app.
    -Sass 
        Facilita na hora de codar em SASS.


########################### Iniciando ############################

- Crie uma tag abaixo normalmente para o seu css:

   link rel=stylesheet href=css/style.css

- Crie uma pasta de nome sass

- Crie um arquivo de nome styles.sass

- Abra o console na pasta raís dos arquivos, e digite o comando:

    sass -watch sass/styles.sass:css/style.css

    Enquanto este comando estar rodando no console, todo o codigo
    escrito no arquivo SASS sera escrito em CSS de form otimizada,
    no nosso arquivo CSS



########################### Criando Variaveis ############################



Para se utilizar de variaveis SASS, criarei um arquivo exclusivo para elas:

    sass/_variables.sass

    Este underline, caracteriza o arquivo um partials (partials, sao pequenos
    arquivos SASS, que sao importando em outros arquivos SASS. Eles sao 
    utilizados para uma melhor organizaçao)

    A sintaxe para a criaçao de variáveis, é semelhante ao CSS, porém
    mais simples. EX:

    $cor-branca: #FFF


Para utilizar a variável, basta ir no arquivo styles.sass e importa-los:

    @use 'variables'

    Quando importo Partials, nao é necessário colocar o "_"

Em sequencia, utilizar na tag/container que eu desejar:

    h2
        color: variables.$cor-branca




########################### Nesting ############################



Nesting é uma forma de trabalhar com a especificidadae do CSS de forma
mais fácil. Basicamente, ao inves de colocar um seletor fiho ao lado do 
seletor pai como no exemplo abaixo: 

    header a {
        color: blue
    }

Com o nesting, podemos digitar no nosso arquivo SASS:

    header

        a 
            color: blue

Caso queiramos criar um seletor para o elementos filho 
que "herde" alguns parametros do seletor pai, podemos 
usar o & comercial.
Ex:

    header {
        &.ul{
            
        }
    }


########################### Mixins ############################


Mixings blocos de codigo CSS que utilizo de forma recorrente, 
basta eu nomear esse bloco de codigo, e importa-lo nos locais
desejados. Ex:

    1- Crie um novo Partial sass, com o nome:

        _mixins.sass

    2- Inicio o codigo, dando nome par ao meu mixin, e em 
    seguida eu coloco o bloco de codigo indentado dentro dele:

        @mixin container
            padding: 1.5rem 0

    3 - Como a partial de variáveis, também é necessário que 
    eu importe o mixin através da diretiva @use dentro do 
    arquivo SASS principal:

        @use 'mixins'

    3- Agora, basta chamar o mixin desejado dentro do seletor 
    desejado, com a diretiva @include:

    .header 
        @include mixins.container

        @inclue = diretiva
        mixins = arquivo que está sendo importando
        container = mixin que está sendo importando



########################### Parent Selector ############################


O parent selector facilita a chamada de um elemento filho da pelo Inicio
da classe do elemento pai, conforme o exemplo abaixo:


    supondo o seguinte codigo HTML:

    <div class="box">
        <div class="box-pequeno">
        </div>
    </div>

    Caso eu queira criar um seletor para o elemento filho (box-pequeno)
    Eu posso usar a sintaxe de parent selector e digitar no seu sass:

    .box
        display:box

        &-filho 
            background-color: black

    Classes do CSS também podem ser acessadas através da sintaxe do 
    parent selector:

    .box
    
        a 
            &:hover 

    No codigo acima, estou dizendo que o elemento filho "a" de pai "Box",
    terá um hover.

